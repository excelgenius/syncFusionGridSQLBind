#pragma checksum "C:\Users\marc\OneDrive - Rivait Software Systems Inc\Programming\blazorTestProjs\blazor-grid-sqldatabinding\EFGrid\Shared\XCustomAdaptorComponent.razor" "{ff1816ec-aa5e-4d10-87f7-6f4963833460}" "bced4af9feb87da890580c518d526f8281ba35b8"
// <auto-generated/>
#pragma warning disable 1591
namespace EFGrid.Shared
{
    #line hidden
    using System;
    using System.Collections.Generic;
    using System.Linq;
    using System.Threading.Tasks;
    using Microsoft.AspNetCore.Components;
#nullable restore
#line 1 "C:\Users\marc\OneDrive - Rivait Software Systems Inc\Programming\blazorTestProjs\blazor-grid-sqldatabinding\EFGrid\_Imports.razor"
using System.Net.Http;

#line default
#line hidden
#nullable disable
#nullable restore
#line 2 "C:\Users\marc\OneDrive - Rivait Software Systems Inc\Programming\blazorTestProjs\blazor-grid-sqldatabinding\EFGrid\_Imports.razor"
using Microsoft.AspNetCore.Authorization;

#line default
#line hidden
#nullable disable
#nullable restore
#line 3 "C:\Users\marc\OneDrive - Rivait Software Systems Inc\Programming\blazorTestProjs\blazor-grid-sqldatabinding\EFGrid\_Imports.razor"
using Microsoft.AspNetCore.Components.Authorization;

#line default
#line hidden
#nullable disable
#nullable restore
#line 4 "C:\Users\marc\OneDrive - Rivait Software Systems Inc\Programming\blazorTestProjs\blazor-grid-sqldatabinding\EFGrid\_Imports.razor"
using Microsoft.AspNetCore.Components.Forms;

#line default
#line hidden
#nullable disable
#nullable restore
#line 5 "C:\Users\marc\OneDrive - Rivait Software Systems Inc\Programming\blazorTestProjs\blazor-grid-sqldatabinding\EFGrid\_Imports.razor"
using Microsoft.AspNetCore.Components.Routing;

#line default
#line hidden
#nullable disable
#nullable restore
#line 6 "C:\Users\marc\OneDrive - Rivait Software Systems Inc\Programming\blazorTestProjs\blazor-grid-sqldatabinding\EFGrid\_Imports.razor"
using Microsoft.AspNetCore.Components.Web;

#line default
#line hidden
#nullable disable
#nullable restore
#line 7 "C:\Users\marc\OneDrive - Rivait Software Systems Inc\Programming\blazorTestProjs\blazor-grid-sqldatabinding\EFGrid\_Imports.razor"
using Microsoft.JSInterop;

#line default
#line hidden
#nullable disable
#nullable restore
#line 8 "C:\Users\marc\OneDrive - Rivait Software Systems Inc\Programming\blazorTestProjs\blazor-grid-sqldatabinding\EFGrid\_Imports.razor"
using EFGrid;

#line default
#line hidden
#nullable disable
#nullable restore
#line 9 "C:\Users\marc\OneDrive - Rivait Software Systems Inc\Programming\blazorTestProjs\blazor-grid-sqldatabinding\EFGrid\_Imports.razor"
using EFGrid.Shared;

#line default
#line hidden
#nullable disable
#nullable restore
#line 1 "C:\Users\marc\OneDrive - Rivait Software Systems Inc\Programming\blazorTestProjs\blazor-grid-sqldatabinding\EFGrid\Shared\XCustomAdaptorComponent.razor"
using Syncfusion.Blazor;

#line default
#line hidden
#nullable disable
#nullable restore
#line 2 "C:\Users\marc\OneDrive - Rivait Software Systems Inc\Programming\blazorTestProjs\blazor-grid-sqldatabinding\EFGrid\Shared\XCustomAdaptorComponent.razor"
using Syncfusion.Blazor.Data;

#line default
#line hidden
#nullable disable
#nullable restore
#line 3 "C:\Users\marc\OneDrive - Rivait Software Systems Inc\Programming\blazorTestProjs\blazor-grid-sqldatabinding\EFGrid\Shared\XCustomAdaptorComponent.razor"
using Newtonsoft.Json;

#line default
#line hidden
#nullable disable
#nullable restore
#line 4 "C:\Users\marc\OneDrive - Rivait Software Systems Inc\Programming\blazorTestProjs\blazor-grid-sqldatabinding\EFGrid\Shared\XCustomAdaptorComponent.razor"
using static EFGrid.Pages.Index;

#line default
#line hidden
#nullable disable
#nullable restore
#line 5 "C:\Users\marc\OneDrive - Rivait Software Systems Inc\Programming\blazorTestProjs\blazor-grid-sqldatabinding\EFGrid\Shared\XCustomAdaptorComponent.razor"
using Microsoft.Data.SqlClient;

#line default
#line hidden
#nullable disable
#nullable restore
#line 6 "C:\Users\marc\OneDrive - Rivait Software Systems Inc\Programming\blazorTestProjs\blazor-grid-sqldatabinding\EFGrid\Shared\XCustomAdaptorComponent.razor"
using System.Data;

#line default
#line hidden
#nullable disable
#nullable restore
#line 7 "C:\Users\marc\OneDrive - Rivait Software Systems Inc\Programming\blazorTestProjs\blazor-grid-sqldatabinding\EFGrid\Shared\XCustomAdaptorComponent.razor"
using System.IO;

#line default
#line hidden
#nullable disable
#nullable restore
#line 8 "C:\Users\marc\OneDrive - Rivait Software Systems Inc\Programming\blazorTestProjs\blazor-grid-sqldatabinding\EFGrid\Shared\XCustomAdaptorComponent.razor"
using System.Web;

#line default
#line hidden
#nullable disable
#nullable restore
#line 9 "C:\Users\marc\OneDrive - Rivait Software Systems Inc\Programming\blazorTestProjs\blazor-grid-sqldatabinding\EFGrid\Shared\XCustomAdaptorComponent.razor"
using Microsoft.AspNetCore.Hosting;

#line default
#line hidden
#nullable disable
    public partial class XCustomAdaptorComponent : DataAdaptor<Order>
    {
        #pragma warning disable 1998
        protected override void BuildRenderTree(Microsoft.AspNetCore.Components.Rendering.RenderTreeBuilder __builder)
        {
            __Blazor.EFGrid.Shared.XCustomAdaptorComponent.TypeInference.CreateCascadingValue_0(__builder, 0, 1, 
#nullable restore
#line 15 "C:\Users\marc\OneDrive - Rivait Software Systems Inc\Programming\blazorTestProjs\blazor-grid-sqldatabinding\EFGrid\Shared\XCustomAdaptorComponent.razor"
                        this

#line default
#line hidden
#nullable disable
            , 2, (__builder2) => {
                __builder2.AddMarkupContent(3, "\r\n    ");
#nullable restore
#line 16 "C:\Users\marc\OneDrive - Rivait Software Systems Inc\Programming\blazorTestProjs\blazor-grid-sqldatabinding\EFGrid\Shared\XCustomAdaptorComponent.razor"
__builder2.AddContent(4, ChildContent);

#line default
#line hidden
#nullable disable
                __builder2.AddMarkupContent(5, "\r\n");
            }
            );
        }
        #pragma warning restore 1998
#nullable restore
#line 19 "C:\Users\marc\OneDrive - Rivait Software Systems Inc\Programming\blazorTestProjs\blazor-grid-sqldatabinding\EFGrid\Shared\XCustomAdaptorComponent.razor"
       
    [Parameter]
    [JsonIgnore]
    public RenderFragment ChildContent { get; set; }
    public static DataSet CreateCommand(string queryString, string connectionString)
    {
        using (SqlConnection connection = new SqlConnection(
                   connectionString))
        {
            SqlDataAdapter adapter = new SqlDataAdapter(queryString, connection);
            DataSet dt = new DataSet();
            try
            {
                connection.Open();
                adapter.Fill(dt);// using sqlDataAdapter we process the query string and fill the data into dataset
            }
            catch (SqlException se)
            {
                Console.WriteLine(se.ToString());
            }
            finally
            {
                connection.Close();
            }
            return dt;
        }
    }

    // Performs data Read operation
    public override object Read(DataManagerRequest DataManagerReq, string Key = null)
    {
        string AppData = _env.ContentRootPath;
        string DatabasePath = Path.Combine(AppData, "App_Data\\NORTHWND.MDF");
        string ConnectionStr = $"Data Source=(LocalDB)\\MSSQLLocalDB;AttachDbFilename='{DatabasePath}';Integrated Security=True;Connect Timeout=30";
        string QueryStr = "SELECT OrderID, CustomerID FROM dbo.Orders ORDER BY OrderID desc OFFSET " + DataManagerReq.Skip + " ROWS FETCH NEXT " + DataManagerReq.Take + " ROWS ONLY;";
        DataSet Data = CreateCommand(QueryStr, ConnectionStr);
        Orders = Data.Tables[0].AsEnumerable().Select(r => new Order
        {
            OrderID = r.Field<int>("OrderID"),
            CustomerID = r.Field<string>("CustomerID")
        }).ToList();  // Here, we convert dataset into list
        IEnumerable<Order> DataSource = Orders;
        SqlConnection Con = new SqlConnection(ConnectionStr);
        Con.Open();
        SqlCommand Cmd = new SqlCommand("SELECT COUNT(*) FROM dbo.Orders", Con);
        Int32 Count = (Int32)Cmd.ExecuteScalar();
        return DataManagerReq.RequiresCounts ? new DataResult() { Result = DataSource, Count = Count } : (object)DataSource;
    }

    // Performs Insert operation
    public override object Insert(DataManager DataManager, object Value, string Key)
    {
        //Here, you can implement your own code to update the record from the grid.
        string AppData = _env.ContentRootPath;
        string DatabasePath = Path.Combine(AppData, "App_Data\\NORTHWND.MDF");
        string ConnectionStr = $"Data Source=(LocalDB)\\MSSQLLocalDB;AttachDbFilename='{DatabasePath}';Integrated Security=True;Connect Timeout=30";
        string QueryStr = $"Insert into Orders(CustomerID) values('{(Value as Order).CustomerID}')";
        SqlConnection Con = new SqlConnection(ConnectionStr);
        try
        {
            Con.Open();
            SqlCommand Cmd = new SqlCommand(QueryStr, Con);
            Cmd.ExecuteNonQuery();
        }
        catch (SqlException Exception)
        {
            Console.WriteLine(Exception.ToString());
        }
        finally
        {
            Con.Close();
        }
        return Value;
    }

    // Performs Update operation
    public override object Update(DataManager DataManager, object Value, string KeyField, string Key)
    {
        //Here, you can implement your own code to update the record from the grid.
        string AppData = _env.ContentRootPath;
        string DatabasePath = Path.Combine(AppData, "App_Data\\NORTHWND.MDF");
        string ConnectionStr = $"Data Source=(LocalDB)\\MSSQLLocalDB;AttachDbFilename='{DatabasePath}';Integrated Security=True;Connect Timeout=30";
        string QueryStr = $"Update Orders set CustomerID='{(Value as Order).CustomerID}' where OrderID={(Value as Order).OrderID}";
        SqlConnection Con = new SqlConnection(ConnectionStr);
        try
        {
            Con.Open();
            SqlCommand Cmd = new SqlCommand(QueryStr, Con);
            Cmd.ExecuteNonQuery();
        }
        catch (SqlException Exception)
        {
            Console.WriteLine(Exception.ToString());
        }
        finally
        {
            Con.Close();
        }
        return Value;
    }

    // Performs Remove operation
    public override object Remove(DataManager DataManager, object Value, string KeyField, string Key)
    {
        //Here, you can implement your own code to delete the record from the grid.
        string AppData = _env.ContentRootPath;
        string DatabasePath = Path.Combine(AppData, "App_Data\\NORTHWND.MDF");
        string Connectionstr = $"Data Source=(LocalDB)\\MSSQLLocalDB;AttachDbFilename='{DatabasePath}';Integrated Security=True;Connect Timeout=30";
        string QueryStr = $"Delete from Orders where OrderID={Value}";
        SqlConnection Con = new SqlConnection(Connectionstr);
        try
        {
            Con.Open();
            SqlCommand Cmd = new SqlCommand(QueryStr, Con);
            Cmd.ExecuteNonQuery();
        }
        catch (SqlException Exception)
        {
            Console.WriteLine(Exception.ToString());
        }
        finally
        {
            Con.Close();
        }
        return Value;
    }


#line default
#line hidden
#nullable disable
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private IHostingEnvironment _env { get; set; }
    }
}
namespace __Blazor.EFGrid.Shared.XCustomAdaptorComponent
{
    #line hidden
    internal static class TypeInference
    {
        public static void CreateCascadingValue_0<TValue>(global::Microsoft.AspNetCore.Components.Rendering.RenderTreeBuilder __builder, int seq, int __seq0, TValue __arg0, int __seq1, global::Microsoft.AspNetCore.Components.RenderFragment __arg1)
        {
        __builder.OpenComponent<global::Microsoft.AspNetCore.Components.CascadingValue<TValue>>(seq);
        __builder.AddAttribute(__seq0, "Value", __arg0);
        __builder.AddAttribute(__seq1, "ChildContent", __arg1);
        __builder.CloseComponent();
        }
    }
}
#pragma warning restore 1591
